/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Forms-gateway
 * The gateway API for forms application
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AuthControllerLoginParams,
  CurrentConnectedUser,
  EvaluationFormTemplate,
  EvaluationFormTemplateControllerCreateRandomTemplateParams,
  EvaluationFormToExport,
  ExportedFormsDTO,
  FormQuestionAnswer,
  FormQuestionAnswerDTO,
  HttpErrorResponseDTO,
  LastVisitedSectionDTO
} from './model';

import { customInstance } from '../apiClient';
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const authControllerLogin = (
    params: AuthControllerLoginParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/auth/login`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getAuthControllerLoginQueryKey = (params: AuthControllerLoginParams,) => {
    return [`/auth/login`, ...(params ? [params]: [])] as const;
    }

    
export const getAuthControllerLoginQueryOptions = <TData = Awaited<ReturnType<typeof authControllerLogin>>, TError = HttpErrorResponseDTO>(params: AuthControllerLoginParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthControllerLoginQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerLogin>>> = ({ signal }) => authControllerLogin(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthControllerLoginQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
export type AuthControllerLoginQueryError = HttpErrorResponseDTO


export function useAuthControllerLogin<TData = Awaited<ReturnType<typeof authControllerLogin>>, TError = HttpErrorResponseDTO>(
 params: AuthControllerLoginParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerLogin>>,
          TError,
          Awaited<ReturnType<typeof authControllerLogin>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthControllerLogin<TData = Awaited<ReturnType<typeof authControllerLogin>>, TError = HttpErrorResponseDTO>(
 params: AuthControllerLoginParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerLogin>>,
          TError,
          Awaited<ReturnType<typeof authControllerLogin>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthControllerLogin<TData = Awaited<ReturnType<typeof authControllerLogin>>, TError = HttpErrorResponseDTO>(
 params: AuthControllerLoginParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useAuthControllerLogin<TData = Awaited<ReturnType<typeof authControllerLogin>>, TError = HttpErrorResponseDTO>(
 params: AuthControllerLoginParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthControllerLoginQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const authControllerAuthenticatedUser = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CurrentConnectedUser>(
      {url: `/auth/authenticated-user`, method: 'GET', signal
    },
      options);
    }
  

export const getAuthControllerAuthenticatedUserQueryKey = () => {
    return [`/auth/authenticated-user`] as const;
    }

    
export const getAuthControllerAuthenticatedUserQueryOptions = <TData = Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError = HttpErrorResponseDTO | CurrentConnectedUser>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthControllerAuthenticatedUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerAuthenticatedUser>>> = ({ signal }) => authControllerAuthenticatedUser(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthControllerAuthenticatedUserQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerAuthenticatedUser>>>
export type AuthControllerAuthenticatedUserQueryError = HttpErrorResponseDTO | CurrentConnectedUser


export function useAuthControllerAuthenticatedUser<TData = Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError = HttpErrorResponseDTO | CurrentConnectedUser>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerAuthenticatedUser>>,
          TError,
          Awaited<ReturnType<typeof authControllerAuthenticatedUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthControllerAuthenticatedUser<TData = Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError = HttpErrorResponseDTO | CurrentConnectedUser>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerAuthenticatedUser>>,
          TError,
          Awaited<ReturnType<typeof authControllerAuthenticatedUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthControllerAuthenticatedUser<TData = Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError = HttpErrorResponseDTO | CurrentConnectedUser>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useAuthControllerAuthenticatedUser<TData = Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError = HttpErrorResponseDTO | CurrentConnectedUser>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerAuthenticatedUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthControllerAuthenticatedUserQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const authControllerRefresh = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/auth/refresh`, method: 'POST', signal
    },
      options);
    }
  


export const getAuthControllerRefreshMutationOptions = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRefresh>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRefresh>>, TError,void, TContext> => {

const mutationKey = ['authControllerRefresh'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRefresh>>, void> = () => {
          

          return  authControllerRefresh(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRefresh>>>
    
    export type AuthControllerRefreshMutationError = HttpErrorResponseDTO

    export const useAuthControllerRefresh = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRefresh>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authControllerRefresh>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthControllerRefreshMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const ssoControllerLogin = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/sso/login`, method: 'GET', signal
    },
      options);
    }
  

export const getSsoControllerLoginQueryKey = () => {
    return [`/sso/login`] as const;
    }

    
export const getSsoControllerLoginQueryOptions = <TData = Awaited<ReturnType<typeof ssoControllerLogin>>, TError = HttpErrorResponseDTO>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ssoControllerLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSsoControllerLoginQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ssoControllerLogin>>> = ({ signal }) => ssoControllerLogin(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ssoControllerLogin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SsoControllerLoginQueryResult = NonNullable<Awaited<ReturnType<typeof ssoControllerLogin>>>
export type SsoControllerLoginQueryError = HttpErrorResponseDTO


export function useSsoControllerLogin<TData = Awaited<ReturnType<typeof ssoControllerLogin>>, TError = HttpErrorResponseDTO>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof ssoControllerLogin>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoControllerLogin>>,
          TError,
          Awaited<ReturnType<typeof ssoControllerLogin>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSsoControllerLogin<TData = Awaited<ReturnType<typeof ssoControllerLogin>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ssoControllerLogin>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoControllerLogin>>,
          TError,
          Awaited<ReturnType<typeof ssoControllerLogin>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSsoControllerLogin<TData = Awaited<ReturnType<typeof ssoControllerLogin>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ssoControllerLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSsoControllerLogin<TData = Awaited<ReturnType<typeof ssoControllerLogin>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ssoControllerLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSsoControllerLoginQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const ssoControllerCallback = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/sso/callback`, method: 'POST', signal
    },
      options);
    }
  


export const getSsoControllerCallbackMutationOptions = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ssoControllerCallback>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ssoControllerCallback>>, TError,void, TContext> => {

const mutationKey = ['ssoControllerCallback'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ssoControllerCallback>>, void> = () => {
          

          return  ssoControllerCallback(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SsoControllerCallbackMutationResult = NonNullable<Awaited<ReturnType<typeof ssoControllerCallback>>>
    
    export type SsoControllerCallbackMutationError = HttpErrorResponseDTO

    export const useSsoControllerCallback = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ssoControllerCallback>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ssoControllerCallback>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getSsoControllerCallbackMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EvaluationFormTemplate[]>(
      {url: `/evaluation-form-templates/by-evaluee`, method: 'GET', signal
    },
      options);
    }
  

export const getEvaluationFormTemplateControllerGetEvaluationFormTemplatesByEvalueeQueryKey = () => {
    return [`/evaluation-form-templates/by-evaluee`] as const;
    }

    
export const getEvaluationFormTemplateControllerGetEvaluationFormTemplatesByEvalueeQueryOptions = <TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError = HttpErrorResponseDTO>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEvaluationFormTemplateControllerGetEvaluationFormTemplatesByEvalueeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>> = ({ signal }) => evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EvaluationFormTemplateControllerGetEvaluationFormTemplatesByEvalueeQueryResult = NonNullable<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>>
export type EvaluationFormTemplateControllerGetEvaluationFormTemplatesByEvalueeQueryError = HttpErrorResponseDTO


export function useEvaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError = HttpErrorResponseDTO>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>,
          TError,
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>,
          TError,
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useEvaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByEvaluee>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEvaluationFormTemplateControllerGetEvaluationFormTemplatesByEvalueeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId = (
    workId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EvaluationFormTemplate>(
      {url: `/evaluation-form-templates/by-work-id/${workId}`, method: 'GET', signal
    },
      options);
    }
  

export const getEvaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkIdQueryKey = (workId: number,) => {
    return [`/evaluation-form-templates/by-work-id/${workId}`] as const;
    }

    
export const getEvaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkIdQueryOptions = <TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError = HttpErrorResponseDTO>(workId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEvaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkIdQueryKey(workId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>> = ({ signal }) => evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId(workId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(workId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EvaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkIdQueryResult = NonNullable<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>>
export type EvaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkIdQueryError = HttpErrorResponseDTO


export function useEvaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError = HttpErrorResponseDTO>(
 workId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>,
          TError,
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError = HttpErrorResponseDTO>(
 workId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>,
          TError,
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError = HttpErrorResponseDTO>(
 workId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useEvaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError = HttpErrorResponseDTO>(
 workId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEvaluationFormTemplateControllerGetEvaluationFormTemplatesByWorkIdQueryOptions(workId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const evaluationFormTemplateControllerToExport = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EvaluationFormToExport[]>(
      {url: `/evaluation-form-templates/to-export`, method: 'GET', signal
    },
      options);
    }
  

export const getEvaluationFormTemplateControllerToExportQueryKey = () => {
    return [`/evaluation-form-templates/to-export`] as const;
    }

    
export const getEvaluationFormTemplateControllerToExportQueryOptions = <TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError = HttpErrorResponseDTO>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEvaluationFormTemplateControllerToExportQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>> = ({ signal }) => evaluationFormTemplateControllerToExport(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EvaluationFormTemplateControllerToExportQueryResult = NonNullable<Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>>
export type EvaluationFormTemplateControllerToExportQueryError = HttpErrorResponseDTO


export function useEvaluationFormTemplateControllerToExport<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError = HttpErrorResponseDTO>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>,
          TError,
          Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvaluationFormTemplateControllerToExport<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>,
          TError,
          Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvaluationFormTemplateControllerToExport<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useEvaluationFormTemplateControllerToExport<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerToExport>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEvaluationFormTemplateControllerToExportQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const evaluationFormTemplateControllerExported = (
    exportedFormsDTO: ExportedFormsDTO,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<boolean>(
      {url: `/evaluation-form-templates/exported`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: exportedFormsDTO
    },
      options);
    }
  


export const getEvaluationFormTemplateControllerExportedMutationOptions = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerExported>>, TError,{data: ExportedFormsDTO}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerExported>>, TError,{data: ExportedFormsDTO}, TContext> => {

const mutationKey = ['evaluationFormTemplateControllerExported'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof evaluationFormTemplateControllerExported>>, {data: ExportedFormsDTO}> = (props) => {
          const {data} = props ?? {};

          return  evaluationFormTemplateControllerExported(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EvaluationFormTemplateControllerExportedMutationResult = NonNullable<Awaited<ReturnType<typeof evaluationFormTemplateControllerExported>>>
    export type EvaluationFormTemplateControllerExportedMutationBody = ExportedFormsDTO
    export type EvaluationFormTemplateControllerExportedMutationError = HttpErrorResponseDTO

    export const useEvaluationFormTemplateControllerExported = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerExported>>, TError,{data: ExportedFormsDTO}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof evaluationFormTemplateControllerExported>>,
        TError,
        {data: ExportedFormsDTO},
        TContext
      > => {

      const mutationOptions = getEvaluationFormTemplateControllerExportedMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const evaluationFormTemplateControllerUpdateLastVisitedSection = (
    formId: number,
    lastVisitedSectionDTO: LastVisitedSectionDTO,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<boolean>(
      {url: `/evaluation-form-templates/last-visited-section/${formId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: lastVisitedSectionDTO
    },
      options);
    }
  


export const getEvaluationFormTemplateControllerUpdateLastVisitedSectionMutationOptions = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerUpdateLastVisitedSection>>, TError,{formId: number;data: LastVisitedSectionDTO}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerUpdateLastVisitedSection>>, TError,{formId: number;data: LastVisitedSectionDTO}, TContext> => {

const mutationKey = ['evaluationFormTemplateControllerUpdateLastVisitedSection'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof evaluationFormTemplateControllerUpdateLastVisitedSection>>, {formId: number;data: LastVisitedSectionDTO}> = (props) => {
          const {formId,data} = props ?? {};

          return  evaluationFormTemplateControllerUpdateLastVisitedSection(formId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EvaluationFormTemplateControllerUpdateLastVisitedSectionMutationResult = NonNullable<Awaited<ReturnType<typeof evaluationFormTemplateControllerUpdateLastVisitedSection>>>
    export type EvaluationFormTemplateControllerUpdateLastVisitedSectionMutationBody = LastVisitedSectionDTO
    export type EvaluationFormTemplateControllerUpdateLastVisitedSectionMutationError = HttpErrorResponseDTO

    export const useEvaluationFormTemplateControllerUpdateLastVisitedSection = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerUpdateLastVisitedSection>>, TError,{formId: number;data: LastVisitedSectionDTO}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof evaluationFormTemplateControllerUpdateLastVisitedSection>>,
        TError,
        {formId: number;data: LastVisitedSectionDTO},
        TContext
      > => {

      const mutationOptions = getEvaluationFormTemplateControllerUpdateLastVisitedSectionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const evaluationFormTemplateControllerGetEvaluationFormTemplate = (
    formId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EvaluationFormTemplate>(
      {url: `/evaluation-form-templates/${formId}`, method: 'GET', signal
    },
      options);
    }
  

export const getEvaluationFormTemplateControllerGetEvaluationFormTemplateQueryKey = (formId: number,) => {
    return [`/evaluation-form-templates/${formId}`] as const;
    }

    
export const getEvaluationFormTemplateControllerGetEvaluationFormTemplateQueryOptions = <TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError = HttpErrorResponseDTO>(formId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEvaluationFormTemplateControllerGetEvaluationFormTemplateQueryKey(formId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>> = ({ signal }) => evaluationFormTemplateControllerGetEvaluationFormTemplate(formId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(formId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EvaluationFormTemplateControllerGetEvaluationFormTemplateQueryResult = NonNullable<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>>
export type EvaluationFormTemplateControllerGetEvaluationFormTemplateQueryError = HttpErrorResponseDTO


export function useEvaluationFormTemplateControllerGetEvaluationFormTemplate<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError = HttpErrorResponseDTO>(
 formId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>,
          TError,
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvaluationFormTemplateControllerGetEvaluationFormTemplate<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError = HttpErrorResponseDTO>(
 formId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>,
          TError,
          Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvaluationFormTemplateControllerGetEvaluationFormTemplate<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError = HttpErrorResponseDTO>(
 formId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useEvaluationFormTemplateControllerGetEvaluationFormTemplate<TData = Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError = HttpErrorResponseDTO>(
 formId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerGetEvaluationFormTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEvaluationFormTemplateControllerGetEvaluationFormTemplateQueryOptions(formId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const evaluationFormTemplateControllerSubmitForm = (
    formId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<boolean>(
      {url: `/evaluation-form-templates/submit-form/${formId}`, method: 'POST', signal
    },
      options);
    }
  


export const getEvaluationFormTemplateControllerSubmitFormMutationOptions = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerSubmitForm>>, TError,{formId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerSubmitForm>>, TError,{formId: number}, TContext> => {

const mutationKey = ['evaluationFormTemplateControllerSubmitForm'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof evaluationFormTemplateControllerSubmitForm>>, {formId: number}> = (props) => {
          const {formId} = props ?? {};

          return  evaluationFormTemplateControllerSubmitForm(formId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EvaluationFormTemplateControllerSubmitFormMutationResult = NonNullable<Awaited<ReturnType<typeof evaluationFormTemplateControllerSubmitForm>>>
    
    export type EvaluationFormTemplateControllerSubmitFormMutationError = HttpErrorResponseDTO

    export const useEvaluationFormTemplateControllerSubmitForm = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerSubmitForm>>, TError,{formId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof evaluationFormTemplateControllerSubmitForm>>,
        TError,
        {formId: number},
        TContext
      > => {

      const mutationOptions = getEvaluationFormTemplateControllerSubmitFormMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const evaluationFormTemplateControllerCreateRandomTemplate = (
    workId: number,
    params: EvaluationFormTemplateControllerCreateRandomTemplateParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EvaluationFormTemplate>(
      {url: `/evaluation-form-templates/create-random-template/${workId}`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getEvaluationFormTemplateControllerCreateRandomTemplateMutationOptions = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerCreateRandomTemplate>>, TError,{workId: number;params: EvaluationFormTemplateControllerCreateRandomTemplateParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerCreateRandomTemplate>>, TError,{workId: number;params: EvaluationFormTemplateControllerCreateRandomTemplateParams}, TContext> => {

const mutationKey = ['evaluationFormTemplateControllerCreateRandomTemplate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof evaluationFormTemplateControllerCreateRandomTemplate>>, {workId: number;params: EvaluationFormTemplateControllerCreateRandomTemplateParams}> = (props) => {
          const {workId,params} = props ?? {};

          return  evaluationFormTemplateControllerCreateRandomTemplate(workId,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EvaluationFormTemplateControllerCreateRandomTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof evaluationFormTemplateControllerCreateRandomTemplate>>>
    
    export type EvaluationFormTemplateControllerCreateRandomTemplateMutationError = HttpErrorResponseDTO

    export const useEvaluationFormTemplateControllerCreateRandomTemplate = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof evaluationFormTemplateControllerCreateRandomTemplate>>, TError,{workId: number;params: EvaluationFormTemplateControllerCreateRandomTemplateParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof evaluationFormTemplateControllerCreateRandomTemplate>>,
        TError,
        {workId: number;params: EvaluationFormTemplateControllerCreateRandomTemplateParams},
        TContext
      > => {

      const mutationOptions = getEvaluationFormTemplateControllerCreateRandomTemplateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const formQuestionAnswerControllerGetAllAnswersByFormId = (
    formId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FormQuestionAnswer[]>(
      {url: `/form-question-answers/by-form/${formId}`, method: 'GET', signal
    },
      options);
    }
  

export const getFormQuestionAnswerControllerGetAllAnswersByFormIdQueryKey = (formId: number,) => {
    return [`/form-question-answers/by-form/${formId}`] as const;
    }

    
export const getFormQuestionAnswerControllerGetAllAnswersByFormIdQueryOptions = <TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError = HttpErrorResponseDTO>(formId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFormQuestionAnswerControllerGetAllAnswersByFormIdQueryKey(formId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>> = ({ signal }) => formQuestionAnswerControllerGetAllAnswersByFormId(formId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(formId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FormQuestionAnswerControllerGetAllAnswersByFormIdQueryResult = NonNullable<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>>
export type FormQuestionAnswerControllerGetAllAnswersByFormIdQueryError = HttpErrorResponseDTO


export function useFormQuestionAnswerControllerGetAllAnswersByFormId<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError = HttpErrorResponseDTO>(
 formId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>,
          TError,
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFormQuestionAnswerControllerGetAllAnswersByFormId<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError = HttpErrorResponseDTO>(
 formId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>,
          TError,
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFormQuestionAnswerControllerGetAllAnswersByFormId<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError = HttpErrorResponseDTO>(
 formId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFormQuestionAnswerControllerGetAllAnswersByFormId<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError = HttpErrorResponseDTO>(
 formId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByFormId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFormQuestionAnswerControllerGetAllAnswersByFormIdQueryOptions(formId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const formQuestionAnswerControllerGetAllAnswersByEvaluee = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FormQuestionAnswer[]>(
      {url: `/form-question-answers/by-evaluee`, method: 'GET', signal
    },
      options);
    }
  

export const getFormQuestionAnswerControllerGetAllAnswersByEvalueeQueryKey = () => {
    return [`/form-question-answers/by-evaluee`] as const;
    }

    
export const getFormQuestionAnswerControllerGetAllAnswersByEvalueeQueryOptions = <TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError = HttpErrorResponseDTO>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFormQuestionAnswerControllerGetAllAnswersByEvalueeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>> = ({ signal }) => formQuestionAnswerControllerGetAllAnswersByEvaluee(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FormQuestionAnswerControllerGetAllAnswersByEvalueeQueryResult = NonNullable<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>>
export type FormQuestionAnswerControllerGetAllAnswersByEvalueeQueryError = HttpErrorResponseDTO


export function useFormQuestionAnswerControllerGetAllAnswersByEvaluee<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError = HttpErrorResponseDTO>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>,
          TError,
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFormQuestionAnswerControllerGetAllAnswersByEvaluee<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>,
          TError,
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFormQuestionAnswerControllerGetAllAnswersByEvaluee<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFormQuestionAnswerControllerGetAllAnswersByEvaluee<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError = HttpErrorResponseDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetAllAnswersByEvaluee>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFormQuestionAnswerControllerGetAllAnswersByEvalueeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const formQuestionAnswerControllerGetFormQuestionAnswer = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FormQuestionAnswer>(
      {url: `/form-question-answers/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getFormQuestionAnswerControllerGetFormQuestionAnswerQueryKey = (id: number,) => {
    return [`/form-question-answers/${id}`] as const;
    }

    
export const getFormQuestionAnswerControllerGetFormQuestionAnswerQueryOptions = <TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError = HttpErrorResponseDTO>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFormQuestionAnswerControllerGetFormQuestionAnswerQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>> = ({ signal }) => formQuestionAnswerControllerGetFormQuestionAnswer(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FormQuestionAnswerControllerGetFormQuestionAnswerQueryResult = NonNullable<Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>>
export type FormQuestionAnswerControllerGetFormQuestionAnswerQueryError = HttpErrorResponseDTO


export function useFormQuestionAnswerControllerGetFormQuestionAnswer<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError = HttpErrorResponseDTO>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>,
          TError,
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFormQuestionAnswerControllerGetFormQuestionAnswer<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError = HttpErrorResponseDTO>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>,
          TError,
          Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFormQuestionAnswerControllerGetFormQuestionAnswer<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError = HttpErrorResponseDTO>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFormQuestionAnswerControllerGetFormQuestionAnswer<TData = Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError = HttpErrorResponseDTO>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerGetFormQuestionAnswer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFormQuestionAnswerControllerGetFormQuestionAnswerQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const formQuestionAnswerControllerAnswerForQuestion = (
    formQuestionAnswerDTO: FormQuestionAnswerDTO,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FormQuestionAnswer>(
      {url: `/form-question-answers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: formQuestionAnswerDTO, signal
    },
      options);
    }
  


export const getFormQuestionAnswerControllerAnswerForQuestionMutationOptions = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerAnswerForQuestion>>, TError,{data: FormQuestionAnswerDTO}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerAnswerForQuestion>>, TError,{data: FormQuestionAnswerDTO}, TContext> => {

const mutationKey = ['formQuestionAnswerControllerAnswerForQuestion'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof formQuestionAnswerControllerAnswerForQuestion>>, {data: FormQuestionAnswerDTO}> = (props) => {
          const {data} = props ?? {};

          return  formQuestionAnswerControllerAnswerForQuestion(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FormQuestionAnswerControllerAnswerForQuestionMutationResult = NonNullable<Awaited<ReturnType<typeof formQuestionAnswerControllerAnswerForQuestion>>>
    export type FormQuestionAnswerControllerAnswerForQuestionMutationBody = FormQuestionAnswerDTO
    export type FormQuestionAnswerControllerAnswerForQuestionMutationError = HttpErrorResponseDTO

    export const useFormQuestionAnswerControllerAnswerForQuestion = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerAnswerForQuestion>>, TError,{data: FormQuestionAnswerDTO}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof formQuestionAnswerControllerAnswerForQuestion>>,
        TError,
        {data: FormQuestionAnswerDTO},
        TContext
      > => {

      const mutationOptions = getFormQuestionAnswerControllerAnswerForQuestionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const formQuestionAnswerControllerDeleteFormQuestionAnswer = (
    formId: number,
    formQuestionId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<FormQuestionAnswer>(
      {url: `/form-question-answers/forms/${formId}/questions/${formQuestionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getFormQuestionAnswerControllerDeleteFormQuestionAnswerMutationOptions = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerDeleteFormQuestionAnswer>>, TError,{formId: number;formQuestionId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerDeleteFormQuestionAnswer>>, TError,{formId: number;formQuestionId: number}, TContext> => {

const mutationKey = ['formQuestionAnswerControllerDeleteFormQuestionAnswer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof formQuestionAnswerControllerDeleteFormQuestionAnswer>>, {formId: number;formQuestionId: number}> = (props) => {
          const {formId,formQuestionId} = props ?? {};

          return  formQuestionAnswerControllerDeleteFormQuestionAnswer(formId,formQuestionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FormQuestionAnswerControllerDeleteFormQuestionAnswerMutationResult = NonNullable<Awaited<ReturnType<typeof formQuestionAnswerControllerDeleteFormQuestionAnswer>>>
    
    export type FormQuestionAnswerControllerDeleteFormQuestionAnswerMutationError = HttpErrorResponseDTO

    export const useFormQuestionAnswerControllerDeleteFormQuestionAnswer = <TError = HttpErrorResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof formQuestionAnswerControllerDeleteFormQuestionAnswer>>, TError,{formId: number;formQuestionId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof formQuestionAnswerControllerDeleteFormQuestionAnswer>>,
        TError,
        {formId: number;formQuestionId: number},
        TContext
      > => {

      const mutationOptions = getFormQuestionAnswerControllerDeleteFormQuestionAnswerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
